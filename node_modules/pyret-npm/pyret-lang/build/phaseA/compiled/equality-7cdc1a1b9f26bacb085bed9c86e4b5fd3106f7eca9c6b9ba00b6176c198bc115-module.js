({"theMap":"{\"version\":3,\"sources\":[\"builtin://equality\"],\"names\":[\"builtin://equality\",\",8,0,81,12,3,208\",\",9,2,104,9,9,111\",\",10,2,114,10,46,158\",\",11,2,161,11,45,204\",\",16,6,284,16,22,300\",\",17,6,317,17,22,333\",\",18,6,350,18,21,365\",\",25,6,542,25,19,555\",\",26,6,572,26,19,585\",\",27,6,602,27,21,617\",\",34,34,829,34,67,862\",\",34,28,823,34,68,863\",\",33,2,769,37,5,920\"],\"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\",\"file\":\"builtin://equality\"}",
"theModule":"function _7cdc1a1b9f26bacb085bed9c86e4b5fd3106f7eca9c6b9ba00b6176c198bc115__22(R,NAMESPACE,M,$error4,$$underscore_import5) {\nvar G = R.getFieldLoc;\nvar U = function throw_error(loc,name) {\nR.ffi.throwUninitializedIdMkLoc(loc,name);\n};\nvar M = \"builtin://equality\";\nvar D = R.undefined;\nvar L = [[M,9,2,104,9,9,111],\n[M,10,2,114,10,46,158],\n[M,10,23,135,10,29,141],\n[M,11,2,161,11,45,204],\n[M,11,22,181,11,28,187],\n[M,8,0,81,12,3,208],\n[M,14,0,210,21,3,467],\n[M,14,21,231,14,35,245],\n[M,14,44,254,14,58,268],\n[M,23,0,469,30,3,727],\n[M,23,20,489,23,34,503],\n[M,23,43,512,23,57,526],\n[M,32,0,729,38,3,924],\n[M,34,28,823,34,68,863],\n[M,34,34,829,34,67,862],\n[M,34,4,799,34,68,863],\n[M,33,2,769,37,5,920],\n[M,35,4,868,35,19,883],\n[M,36,4,888,36,30,914],\n[M,33,8,775,33,22,789],\n[M,32,21,750,32,35,764],\n[\"dummy location\"],\n[M,3,0,13,38,3,924]];\nvar builtins1 = R.getModuleField(\"builtin://global\",\"values\",\"builtins\");\nvar nothing2 = R.getModuleField(\"builtin://global\",\"values\",\"nothing\");\nvar raise1 = R.getModuleField(\"builtin://global\",\"values\",\"raise\");\nvar $type$String8 = R.getModuleField(\"builtin://global\",\"types\",\"String\");\nvar error2 = $error4;\nvar $underscore_import3 = $$underscore_import5;\nvar $cases_dispatch101 = {\"Unknown\":3,\n\"Equal\":5,\n\"NotEqual\":6};\nvar $toplevel6 = function _7cdc1a1b9f26bacb085bed9c86e4b5fd3106f7eca9c6b9ba00b6176c198bc115__22($$resumer13) {\nvar $step5 = 0;\nvar $elidedFrames14 = 0;\nvar $ans10 = D;\nvar $al12 = L[22];\nif(R.isAR($$resumer13)) {\n$step5 = $$resumer13.step;\n$al12 = $$resumer13.from;\n$ans10 = $$resumer13.ans;\n$elidedFrames14 = $$resumer13.elidedFrames;\n$resumer13 = $$resumer13.args[0];\nis$EqualityResult40 = $$resumer13.vars[0];\nto$boolean104 = $$resumer13.vars[1];\nis$Unknown47 = $$resumer13.vars[2];\nanswer106 = $$resumer13.vars[3];\nequal$and65 = $$resumer13.vars[4];\nUnknown48 = $$resumer13.vars[5];\nNotEqual45 = $$resumer13.vars[6];\nis$Equal41 = $$resumer13.vars[7];\nEqualityResult62 = $$resumer13.vars[8];\nequal$or80 = $$resumer13.vars[9];\nis$NotEqual43 = $$resumer13.vars[10];\nEqual42 = $$resumer13.vars[11];\n}\nif(--R.GAS <= 0 || --R.RUNGAS <= 0) {\nR.EXN_STACKHEIGHT = 0;\n$ans10 = R.mC();\n}\nwhile(!R.isContinuation($ans10)) {\nswitch($step5) {\ncase 0: var EqualityResult15 = R.nB(\"EqualityResult\",L[5]);\nvar EqualityResult62 = R.mBA(EqualityResult15,\"EqualityResult\");\nvar EqualityResult39 = {\"$var\":D};\nvar is$EqualityResult40 = {\"$var\":D};\nvar is$Equal41 = {\"$var\":D};\nvar Equal42 = {\"$var\":D};\nvar is$NotEqual43 = {\"$var\":D};\nvar NotEqual45 = {\"$var\":D};\nvar is$Unknown47 = {\"$var\":D};\nvar Unknown48 = {\"$var\":D};\nvar equal$and65 = {\"$var\":D};\nvar equal$or80 = {\"$var\":D};\nvar to$boolean104 = {\"$var\":D};\nvar $Equal_getfields20 = function variant(f) {\nreturn f();\n};\nvar $Equal_mutablemask19 = [];\nvar $Equal$base16 = {\"_match\":R.mM(\"Equal\",0)};\nvar $Equal$brander17 = R.nB(\"Equal\",L[0]);\nvar $Equal$brands18 = {};\n$Equal$brands18[EqualityResult15._brand] = true;\n$Equal$brands18[$Equal$brander17._brand] = true;\nvar $NotEqual_getfields25 = function singleton_variant(f) {\nreturn f(this.dict[\"reason\"],this.dict[\"value1\"],this.dict[\"value2\"]);\n};\nvar $NotEqual_mutablemask24 = [false,false,false];\nvar $NotEqual$base21 = {\"$fieldNames\":[\"reason\",\"value1\",\"value2\"],\n\"_match\":R.mM(\"NotEqual\",3)};\nvar $NotEqual$brander22 = R.nB(\"NotEqual\",L[1]);\nvar $NotEqual$brands23 = {};\n$NotEqual$brands23[EqualityResult15._brand] = true;\n$NotEqual$brands23[$NotEqual$brander22._brand] = true;\nvar NotEqual26 = R.mVC(L[1],function $synthesizedConstructor_$NotEqual$base() {\nreturn [$type$String8];\n},[\"reason27\"],[L[2]],[false,false,false],[\"reason27\",\"value128\",\"value229\"],$NotEqual_mutablemask24,$NotEqual$base21,$NotEqual$brands23,\"NotEqual\",$NotEqual_getfields25,$NotEqual$base21);\nvar $Unknown_getfields34 = function singleton_variant(f) {\nreturn f(this.dict[\"reason\"],this.dict[\"value1\"],this.dict[\"value2\"]);\n};\nvar $Unknown_mutablemask33 = [false,false,false];\nvar $Unknown$base30 = {\"$fieldNames\":[\"reason\",\"value1\",\"value2\"],\n\"_match\":R.mM(\"Unknown\",3)};\nvar $Unknown$brander31 = R.nB(\"Unknown\",L[3]);\nvar $Unknown$brands32 = {};\n$Unknown$brands32[EqualityResult15._brand] = true;\n$Unknown$brands32[$Unknown$brander31._brand] = true;\nvar Unknown35 = R.mVC(L[3],function $synthesizedConstructor_$Unknown$base() {\nreturn [$type$String8];\n},[\"reason36\"],[L[4]],[false,false,false],[\"reason36\",\"value137\",\"value238\"],$Unknown_mutablemask33,$Unknown$base30,$Unknown$brands32,\"Unknown\",$Unknown_getfields34,$Unknown$base30);\nvar anf_assign82 = R.mO({\"EqualityResult\":G(EqualityResult15,\"test\",L[5]),\n\"is-Equal\":G($Equal$brander17,\"test\",L[0]),\n\"Equal\":R.mDV($Equal$base16,$Equal$brands18,\"Equal\",$Equal_getfields20,-1,$Equal_mutablemask19,$Equal$base16,false,L[0]),\n\"is-NotEqual\":G($NotEqual$brander22,\"test\",L[1]),\n\"NotEqual\":NotEqual26,\n\"is-Unknown\":G($Unknown$brander31,\"test\",L[3]),\n\"Unknown\":Unknown35});\nEqualityResult39.$var = anf_assign82;\nR.nothing;\n$al12 = L[5];\nvar anf_assign84 = G(EqualityResult39.$var,\"EqualityResult\",L[5]);\nis$EqualityResult40.$var = anf_assign84;\nR.nothing;\n$al12 = L[0];\nvar anf_assign86 = G(EqualityResult39.$var,\"is-Equal\",L[0]);\nis$Equal41.$var = anf_assign86;\nR.nothing;\n$al12 = L[0];\nvar anf_assign88 = G(EqualityResult39.$var,\"Equal\",L[0]);\nEqual42.$var = anf_assign88;\nR.nothing;\n$al12 = L[1];\nvar anf_assign90 = G(EqualityResult39.$var,\"is-NotEqual\",L[1]);\nis$NotEqual43.$var = anf_assign90;\nR.nothing;\n$al12 = L[1];\nvar anf_assign44 = G(EqualityResult39.$var,\"NotEqual\",L[1]);\nNotEqual45.$var = anf_assign44;\nR.nothing;\n$al12 = L[3];\nvar anf_assign46 = G(EqualityResult39.$var,\"is-Unknown\",L[3]);\nis$Unknown47.$var = anf_assign46;\nR.nothing;\n$al12 = L[3];\nvar anf_assign83 = G(EqualityResult39.$var,\"Unknown\",L[3]);\nUnknown48.$var = anf_assign83;\nR.nothing;\nvar $temp_lam51 = function _7cdc1a1b9f26bacb085bed9c86e4b5fd3106f7eca9c6b9ba00b6176c198bc115__6($er152,$er253) {\nvar $step50 = 0;\nvar $elidedFrames57 = 0;\nvar $ans54 = D;\nvar $al55 = L[6];\nvar $l = arguments.length;\nif($l !== 2) {\nvar $t = new Array($l);\nfor(var $i = 0;$i < $l;++$i) {\n$t[$i] = arguments[$i];\n}\nR.cAC(L[6],2,$t,false);\n}\nvar er152 = $er152;\nvar er253 = $er253;\n// callee optimization;\nwhile(!R.isContinuation($ans54)) {\nswitch($step50) {\ncase 0: $step50 = 1;\n$al55 = L[7];\nR._cA(L[7],EqualityResult62,er152);\nbreak;\ncase 1: $step50 = 2;\n$al55 = L[8];\nR._cA(L[8],EqualityResult62,er253);\nbreak;\ncase 2: // caller optimization;\n$ans54 = is$NotEqual43.$var.app(er152);\nvar anf_if61 = $ans54;\n$step50 = R.checkPyretTrue(anf_if61)?3:4;\nbreak;\ncase 3: $step50 = 9;\n$ans54 = er152;\nbreak;\ncase 4: // caller optimization;\n$ans54 = is$NotEqual43.$var.app(er253);\nvar anf_if59 = $ans54;\n$step50 = R.checkPyretTrue(anf_if59)?5:6;\nbreak;\ncase 5: $step50 = 9;\n$ans54 = er253;\nbreak;\ncase 6: // caller optimization;\n$ans54 = is$Unknown47.$var.app(er152);\nvar anf_if58 = $ans54;\n$step50 = R.checkPyretTrue(anf_if58)?7:8;\nbreak;\ncase 7: $step50 = 9;\n$ans54 = er152;\nbreak;\ncase 8: $step50 = 9;\n$ans54 = er253;\nbreak;\ncase 9: return $ans54;\ndefault: R.ffi.throwSpinnakerError(L[6],$step50);\n}\n}\nreturn $ans54;\n};\nvar anf_assign91 = R.mF($temp_lam51,\"equal-and\");\nequal$and65.$var = anf_assign91;\nR.nothing;\nvar $temp_lam68 = function _7cdc1a1b9f26bacb085bed9c86e4b5fd3106f7eca9c6b9ba00b6176c198bc115__9($er169,$er270) {\nvar $step67 = 0;\nvar $elidedFrames74 = 0;\nvar $ans71 = D;\nvar $al72 = L[9];\nvar $l = arguments.length;\nif($l !== 2) {\nvar $t = new Array($l);\nfor(var $i = 0;$i < $l;++$i) {\n$t[$i] = arguments[$i];\n}\nR.cAC(L[9],2,$t,false);\n}\nvar er169 = $er169;\nvar er270 = $er270;\n// callee optimization;\nwhile(!R.isContinuation($ans71)) {\nswitch($step67) {\ncase 0: $step67 = 1;\n$al72 = L[10];\nR._cA(L[10],EqualityResult62,er169);\nbreak;\ncase 1: $step67 = 2;\n$al72 = L[11];\nR._cA(L[11],EqualityResult62,er270);\nbreak;\ncase 2: // caller optimization;\n$ans71 = is$Equal41.$var.app(er169);\nvar anf_if77 = $ans71;\n$step67 = R.checkPyretTrue(anf_if77)?3:4;\nbreak;\ncase 3: $step67 = 9;\n$ans71 = er169;\nbreak;\ncase 4: // caller optimization;\n$ans71 = is$Equal41.$var.app(er270);\nvar anf_if76 = $ans71;\n$step67 = R.checkPyretTrue(anf_if76)?5:6;\nbreak;\ncase 5: $step67 = 9;\n$ans71 = er270;\nbreak;\ncase 6: // caller optimization;\n$ans71 = is$Unknown47.$var.app(er169);\nvar anf_if75 = $ans71;\n$step67 = R.checkPyretTrue(anf_if75)?7:8;\nbreak;\ncase 7: $step67 = 9;\n$ans71 = er169;\nbreak;\ncase 8: $step67 = 9;\n$ans71 = er270;\nbreak;\ncase 9: return $ans71;\ndefault: R.ffi.throwSpinnakerError(L[9],$step67);\n}\n}\nreturn $ans71;\n};\nvar anf_assign99 = R.mF($temp_lam68,\"equal-or\");\nequal$or80.$var = anf_assign99;\nR.nothing;\nvar $temp_lam83 = function _7cdc1a1b9f26bacb085bed9c86e4b5fd3106f7eca9c6b9ba00b6176c198bc115__12($er84) {\nvar $step82 = 0;\nvar $elidedFrames88 = 0;\nvar $ans85 = D;\nvar $al86 = L[12];\nif(R.isAR($er84)) {\n$step82 = $er84.step;\n$al86 = $er84.from;\n$ans85 = $er84.ans;\n$elidedFrames88 = $er84.elidedFrames;\ner84 = $er84.args[0];\ncases89 = $er84.vars[0];\n} else {\nvar $l = arguments.length;\nif($l !== 1) {\nvar $t = new Array($l);\nfor(var $i = 0;$i < $l;++$i) {\n$t[$i] = arguments[$i];\n}\nR.cAC(L[12],1,$t,false);\n}\nvar er84 = $er84;\n}\nif(--R.GAS <= 0 || --R.RUNGAS <= 0) {\nR.EXN_STACKHEIGHT = 0;\n$ans85 = R.mC();\n}\nwhile(!R.isContinuation($ans85)) {\nswitch($step82) {\ncase 0: $step82 = 1;\n$al86 = L[20];\nR._cA(L[20],EqualityResult62,er84);\nbreak;\ncase 1: var cases89 = er84;\n$step82 = 2;\n$al86 = L[19];\nvar $ann$check102 = R._cA(L[19],EqualityResult62,cases89);\nif(R.isContinuation($ann$check102)) {\n$ans85 = $ann$check102;\n}\nbreak;\ncase 2: $al86 = L[16];\n$step82 = $cases_dispatch101[cases89.$name] || 7;\nbreak;\ncase 3: if(cases89.$arity !== 3) {\nif(cases89.$arity >= 0) {\nR.ffi.throwCasesArityErrorC(L[15],3,cases89.$arity,L[16],cases89.$loc);\n} else {\nR.ffi.throwCasesSingletonErrorC(L[15],true,L[16],cases89.$loc);\n}\n}\nvar $fn95 = cases89.$constructor.$fieldNames;\nvar r90 = R.dF(cases89.dict[$fn95[0]],cases89.$mut_fields_mask[0],false);\nvar v191 = R.dF(cases89.dict[$fn95[1]],cases89.$mut_fields_mask[1],false);\nvar v292 = R.dF(cases89.dict[$fn95[2]],cases89.$mut_fields_mask[2],false);\n$step82 = 4;\n$al86 = L[14];\nif(typeof(error2.dict.values.dict[\"equality-failure\"].app) !== \"function\") {\nR.ffi.throwNonFunApp($al86,error2.dict.values.dict[\"equality-failure\"]);\n}\n$ans85 = error2.dict.values.dict[\"equality-failure\"].app(r90,v191,v292);\nbreak;\ncase 4: var anf_arg93 = $ans85;\n$step82 = 8;\n$al86 = L[13];\nif(typeof(raise1.app) !== \"function\") {\nR.ffi.throwNonFunApp($al86,raise1);\n}\n$ans85 = raise1.app(anf_arg93);\nbreak;\ncase 5: if(cases89.$arity !== -1) {\nR.ffi.throwCasesSingletonErrorC(L[17],false,L[16],cases89.$loc);\n}\n$step82 = 8;\n$ans85 = (true);\nbreak;\ncase 6: if(cases89.$arity !== 3) {\nif(cases89.$arity >= 0) {\nR.ffi.throwCasesArityErrorC(L[18],3,cases89.$arity,L[16],cases89.$loc);\n} else {\nR.ffi.throwCasesSingletonErrorC(L[18],true,L[16],cases89.$loc);\n}\n}\nvar $fn97 = cases89.$constructor.$fieldNames;\nR.dF(cases89.dict[$fn97[0]],cases89.$mut_fields_mask[0],false);\nR.dF(cases89.dict[$fn97[1]],cases89.$mut_fields_mask[1],false);\nR.dF(cases89.dict[$fn97[2]],cases89.$mut_fields_mask[2],false);\n$step82 = 8;\n$ans85 = (false);\nbreak;\ncase 7: $ans85 = R.throwNoCasesMatched(L[16],cases89);\n$step82 = 8;\nbreak;\ncase 8: ++R.GAS;\nreturn $ans85;\ndefault: R.ffi.throwSpinnakerError(L[12],$step82);\n}\n}\nif($step82 !== 8) {\n$ans85.stack[R.EXN_STACKHEIGHT++] = R.mAR($al86,$temp_lam83,$step82,[er84],[cases89],$elidedFrames88);\n}\nreturn $ans85;\n};\nvar anf_assign103 = R.mF($temp_lam83,\"to-boolean\");\nto$boolean104.$var = anf_assign103;\nR.nothing;\n$step5 = 1;\n$ans10 = R.maybeMethodCall2(builtins1,\"trace-value\",L[21],L[21],nothing2);\nbreak;\ncase 1: var answer106 = $ans10;\n$step5 = 2;\n$ans10 = R.maybeMethodCall0(builtins1,\"current-checker\",L[5]);\nbreak;\ncase 2: var anf_method_obj105 = $ans10;\n$step5 = 3;\n$ans10 = R.maybeMethodCall0(anf_method_obj105,\"results\",L[5]);\nbreak;\ncase 3: var checks107 = $ans10;\n$step5 = 4;\n$ans10 = R.mO({\"answer\":answer106,\n\"namespace\":NAMESPACE,\n\"locations\":L,\n\"defined-modules\":{\"error\":error2},\n\"defined-values\":{\"NotEqual\":NotEqual45.$var,\n\"is-NotEqual\":is$NotEqual43.$var,\n\"is-Unknown\":is$Unknown47.$var,\n\"Unknown\":Unknown48.$var,\n\"is-Equal\":is$Equal41.$var,\n\"Equal\":Equal42.$var,\n\"to-boolean\":to$boolean104.$var,\n\"is-EqualityResult\":is$EqualityResult40.$var,\n\"equal-or\":equal$or80.$var,\n\"equal-and\":equal$and65.$var},\n\"defined-types\":{\"EqualityResult\":EqualityResult62},\n\"provide-plus-types\":R.mO({\"values\":R.mO({\"NotEqual\":NotEqual45.$var,\n\"is-NotEqual\":is$NotEqual43.$var,\n\"is-Unknown\":is$Unknown47.$var,\n\"Unknown\":Unknown48.$var,\n\"is-Equal\":is$Equal41.$var,\n\"Equal\":Equal42.$var,\n\"to-boolean\":to$boolean104.$var,\n\"is-EqualityResult\":is$EqualityResult40.$var,\n\"equal-or\":equal$or80.$var,\n\"equal-and\":equal$and65.$var}),\n\"types\":{\"EqualityResult\":EqualityResult62},\n\"modules\":{}}),\n\"checks\":checks107});\nbreak;\ncase 4: ++R.GAS;\nreturn $ans10;\ndefault: R.ffi.throwSpinnakerError(L[22],$step5);\n}\n}\nif($step5 !== 4) {\n$ans10.stack[R.EXN_STACKHEIGHT++] = R.mAR($al12,$toplevel6,$step5,[],[is$EqualityResult40,to$boolean104,is$Unknown47,answer106,equal$and65,Unknown48,NotEqual45,is$Equal41,EqualityResult62,equal$or80,is$NotEqual43,Equal42],$elidedFrames14);\n}\nreturn $ans10;\n};\nreturn R.safeCall($toplevel6,function module_load(moduleVal) {\nR.modules[\"$builtin://equality3\"] = moduleVal;\nreturn moduleVal;\n},\"Evaluating $toplevel\");\n}",
"nativeRequires":[],
"provides":{"modules":{},
"values":{"equal-and":{"bind":"fun",
"origin":{"local-bind-site":["builtin://equality",
3,
0,
13,
3,
9,
22],
"definition-bind-site":["builtin://equality",
14,
0,
210,
21,
3,
467],
"new-definition":true,
"uri-of-definition":"builtin://equality"},
"flatness":1,
"name":"equal-and",
"typ":"tany"},
"equal-or":{"bind":"fun",
"origin":{"local-bind-site":["builtin://equality",
3,
0,
13,
3,
9,
22],
"definition-bind-site":["builtin://equality",
23,
0,
469,
30,
3,
727],
"new-definition":true,
"uri-of-definition":"builtin://equality"},
"flatness":1,
"name":"equal-or",
"typ":"tany"},
"is-EqualityResult":{"bind":"let",
"origin":{"local-bind-site":["builtin://equality",
4,
0,
23,
4,
15,
38],
"definition-bind-site":["builtin://equality",
8,
0,
81,
12,
3,
208],
"new-definition":true,
"uri-of-definition":"builtin://equality"},
"typ":"tany"},
"to-boolean":{"bind":"fun",
"origin":{"local-bind-site":["builtin://equality",
3,
0,
13,
3,
9,
22],
"definition-bind-site":["builtin://equality",
32,
0,
729,
38,
3,
924],
"new-definition":true,
"uri-of-definition":"builtin://equality"},
"flatness":false,
"name":"to-boolean",
"typ":"tany"},
"Equal":{"bind":"let",
"origin":{"local-bind-site":["builtin://equality",
4,
0,
23,
4,
15,
38],
"definition-bind-site":["builtin://equality",
9,
2,
104,
9,
9,
111],
"new-definition":true,
"uri-of-definition":"builtin://equality"},
"typ":"tany"},
"is-Equal":{"bind":"fun",
"origin":{"local-bind-site":["builtin://equality",
4,
0,
23,
4,
15,
38],
"definition-bind-site":["builtin://equality",
9,
2,
104,
9,
9,
111],
"new-definition":true,
"uri-of-definition":"builtin://equality"},
"flatness":0,
"name":"is-Equal",
"typ":"tany"},
"Unknown":{"bind":"fun",
"origin":{"local-bind-site":["builtin://equality",
4,
0,
23,
4,
15,
38],
"definition-bind-site":["builtin://equality",
11,
2,
161,
11,
45,
204],
"new-definition":true,
"uri-of-definition":"builtin://equality"},
"flatness":0,
"name":"Unknown",
"typ":"tany"},
"is-Unknown":{"bind":"fun",
"origin":{"local-bind-site":["builtin://equality",
4,
0,
23,
4,
15,
38],
"definition-bind-site":["builtin://equality",
11,
2,
161,
11,
45,
204],
"new-definition":true,
"uri-of-definition":"builtin://equality"},
"flatness":0,
"name":"is-Unknown",
"typ":"tany"},
"is-NotEqual":{"bind":"fun",
"origin":{"local-bind-site":["builtin://equality",
4,
0,
23,
4,
15,
38],
"definition-bind-site":["builtin://equality",
10,
2,
114,
10,
46,
158],
"new-definition":true,
"uri-of-definition":"builtin://equality"},
"flatness":0,
"name":"is-NotEqual",
"typ":"tany"},
"NotEqual":{"bind":"fun",
"origin":{"local-bind-site":["builtin://equality",
4,
0,
23,
4,
15,
38],
"definition-bind-site":["builtin://equality",
10,
2,
114,
10,
46,
158],
"new-definition":true,
"uri-of-definition":"builtin://equality"},
"flatness":0,
"name":"NotEqual",
"typ":"tany"}},
"datatypes":{"EqualityResult":["data",{"local-bind-site":["builtin://equality",
8,
0,
81,
12,
3,
208],
"definition-bind-site":["builtin://equality",
8,
0,
81,
12,
3,
208],
"new-definition":true,
"uri-of-definition":"builtin://equality"},"EqualityResult",[],[["Equal",
{}],["NotEqual",
[["reason",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["value1",
"tany"],["value2",
"tany"]],
{}],["Unknown",
[["reason",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["value1",
"tany"],["value2",
"tany"]],
{}]],{}]},
"aliases":{"EqualityResult":"tany"}},
"requires":[{"import-type":"builtin",
"name":"error"},
{"import-type":"builtin",
"name":"global"}]})